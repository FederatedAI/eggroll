/*
 * Copyright 2019 The Eggroll Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "basic-meta.proto";
import "computing-basic.proto";

package com.webank.ai.eggroll.api.framework.egg;


message ComputingEngineRequest {
    com.webank.ai.eggroll.api.core.SessionInfo session = 1;
    com.webank.ai.eggroll.api.computing.ComputingEngineDescriptor computingEngineDesc = 2;
}

message HeartbeatRequest {
    com.webank.ai.eggroll.api.core.Endpoint endpoint = 1;
}

message HeartbeatResponse {

}

service NodeService {
    rpc getProcessor (com.webank.ai.eggroll.api.core.Endpoint) returns (com.webank.ai.eggroll.api.core.Endpoint);
    rpc getAllPossibleProcessors (com.webank.ai.eggroll.api.core.Endpoint) returns (com.webank.ai.eggroll.api.core.Endpoints);
    rpc killProcessor (com.webank.ai.eggroll.api.core.Endpoint) returns (com.webank.ai.eggroll.api.core.Endpoint);
    rpc killAllProcessors (com.webank.ai.eggroll.api.core.Endpoint) returns (com.webank.ai.eggroll.api.core.Endpoints);
}

service NodeManagerService {
    rpc heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

service SessionService {
    rpc getOrCreateSession (com.webank.ai.eggroll.api.core.SessionInfo) returns (com.webank.ai.eggroll.api.core.SessionInfo);
    rpc stopSession (com.webank.ai.eggroll.api.core.SessionInfo) returns (com.webank.ai.eggroll.api.core.SessionInfo);
    rpc getComputingEngine (ComputingEngineRequest) returns (com.webank.ai.eggroll.api.computing.ComputingEngineDescriptor);
}