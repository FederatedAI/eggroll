# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import extend_pb2 as extend__pb2


class ExtendTransferServerStub(object):
    """TODO: use transfer lib
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLog = channel.stream_stream(
                '/com.webank.eggroll.core.transfer.ExtendTransferServer/getLog',
                request_serializer=extend__pb2.GetLogRequest.SerializeToString,
                response_deserializer=extend__pb2.GetLogResponse.FromString,
                )


class ExtendTransferServerServicer(object):
    """TODO: use transfer lib
    """

    def getLog(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExtendTransferServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLog': grpc.stream_stream_rpc_method_handler(
                    servicer.getLog,
                    request_deserializer=extend__pb2.GetLogRequest.FromString,
                    response_serializer=extend__pb2.GetLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.webank.eggroll.core.transfer.ExtendTransferServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExtendTransferServer(object):
    """TODO: use transfer lib
    """

    @staticmethod
    def getLog(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.webank.eggroll.core.transfer.ExtendTransferServer/getLog',
            extend__pb2.GetLogRequest.SerializeToString,
            extend__pb2.GetLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
